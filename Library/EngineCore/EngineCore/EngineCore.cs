using System;using System.Collections;using System.Collections.Generic;using System.Drawing;using System.Linq;using System.Text;using System.Threading.Tasks;using EngineCore.Components;namespace EngineCore{    /// <summary>    /// CoreManager单例类提供了一组管理游戏物件的方法    /// </summary>    public class DCoreManager    {        /// <summary>        /// 表示坐标系模式        /// </summary>        public enum CoordinateModes { XY, UV };        /// <summary>        /// 表示画面更新模式        /// </summary>        public enum UpdateModes { interval, enterFrame };        /// <summary>        /// 表示屏幕适配方案        /// </summary>        public enum ScreenResolutions { None, Stretch, Zoom };        private static DCoreManager _instance = null;        private CoordinateModes _coordinateMode;        private UpdateModes _updateMode;        private ScreenResolutions _screenResolution;        private DVideoPlayerClass _videoPlayer;        private List<DScene> _scene_pool;        private int _FPS;        private int _interval_time;        private DCoreManager()        {            this._coordinateMode = CoordinateModes.UV;            this._updateMode = UpdateModes.enterFrame;            this._screenResolution = ScreenResolutions.None;            this._FPS = 24;            this._interval_time = 0;            this._videoPlayer = new DVideoPlayerClass();        }        /// <summary>        /// 获取或设置游戏的坐标系模式        /// </summary>        public CoordinateModes CoordinateMode        {            set            {                this._coordinateMode = value;            }            get            {                return this._coordinateMode;            }        }        /// <summary>        /// 获取或设置游戏的画面更新模式        /// </summary>        public UpdateModes UpdateMode        {            set            {                this._updateMode = value;            }            get            {                return this._updateMode;            }        }        /// <summary>        /// 获取或设置游戏的屏幕适配方案        /// </summary>        public ScreenResolutions ScreenResolution        {            set            {                this._screenResolution = value;            }            get            {                return this._screenResolution;            }        }        /// <summary>        /// 获取或设置游戏的帧率        /// </summary>        public int FPS        {            set            {                this._FPS = value;            }            get            {                return this._FPS;            }        }        /// <summary>        /// 获取或设置interval模式下interval函数的时间间隔        /// </summary>        public int IntervalTime        {            set            {                this._interval_time = value;            }            get            {                return this._interval_time;            }        }        /// <summary>        /// 获取场景池的引用        /// </summary>        public List<DScene> ScenePool        {            get            {                return this._scene_pool;            }        }        /// <summary>        /// 获取播放器类的实例引用        /// </summary>        public DVideoPlayerClass VideoPlayer        {            get            {                return _videoPlayer;            }        }        /// <summary>        /// 获取Manager单例类的实例引用        /// </summary>        /// <returns>一个Manager类的实例</returns>        public static DCoreManager get_instance()        {            if (_instance == null)                _instance = new DCoreManager();            return _instance;        }    }    /// <summary>    /// 表示播放器的类    /// </summary>    public class DVideoPlayerClass    {        internal DVideoPlayerClass()        {        }    }    /// <summary>    /// 表示场景的类    /// </summary>    public class DScene    {        /// <summary>        /// 表示场景切换的动画效果方案        /// </summary>        /// <remarks>当切换风格为Color时需要设置FromColor和ToColor的值</remarks>        public struct SwitchResolution        {            public enum SwitchStyles { Color, Alpha, None };            public SwitchStyles SwitchStyle;            public uint FromColor;            public uint ToColor;        }        private List<DGameObject> _object_pool;        private SwitchResolution _intoResolution;        private SwitchResolution _outResolution;        /// <summary>        /// 构造一个新的场景，并设置为不使用淡入淡出方案        /// </summary>        public DScene()        {            this._object_pool = new List<DGameObject>();            this._intoResolution = new SwitchResolution();            this._intoResolution.SwitchStyle = SwitchResolution.SwitchStyles.None;            this._outResolution = new SwitchResolution();            this._outResolution.SwitchStyle = SwitchResolution.SwitchStyles.None;        }        /// <summary>        /// 获取物件池的引用        /// </summary>        public List<DGameObject> ObjectPool        {            get            {                return this._object_pool;            }        }        /// <summary>        /// 获取或设置场景的切入方案        /// </summary>        public SwitchResolution IntoResolution        {            set            {                this._intoResolution = value;            }            get            {                return this._intoResolution;            }        }        /// <summary>        /// 获取或设置场景的切出方案        /// </summary>        public SwitchResolution OutResolution        {            set            {                this._outResolution = value;            }            get            {                return this._outResolution;            }        }    }    /// <summary>    /// 表示游戏物件的类    /// </summary>    public class DGameObject    {        private DTransform _transform;        private List<DRender> _renderPool;        private List<DAnimation> _animationPool;        private List<DPhysics> _physicsPool;        private List<DInteraction> _interactionPool;        private List<DBindingData> _bindingDataPool;        private List<DTrigger> _triggerPool;        /// <summary>        /// 构造一个新的游戏物件        /// </summary>        public DGameObject()        {            this._transform = new DTransform();            this._renderPool = new List<DRender>();            this._animationPool = new List<DAnimation>();            this._physicsPool = new List<DPhysics>();            this._interactionPool = new List<DInteraction>();            this._bindingDataPool = new List<DBindingData>();            this._triggerPool = new List<DTrigger>();        }        /// <summary>        /// 获取变换组件实例的引用        /// </summary>        public DTransform Transform        {            get            {                return this._transform;            }        }        /// <summary>        /// 获取渲染组件实例集合的引用        /// </summary>        public List<DRender> RenderPool        {            get            {                return this._renderPool;            }        }        /// <summary>        /// 获取动画组件实例集合的引用        /// </summary>        public List<DAnimation> AnimationPool        {            get            {                return this._animationPool;            }        }        /// <summary>        /// 获取物理组件实例集合的引用        /// </summary>        public List<DPhysics> PhysicsPool        {            get            {                return this._physicsPool;            }        }        /// <summary>        /// 获取交互组件实例集合的引用        /// </summary>        public List<DInteraction> InteractionPool        {            get            {                return this._interactionPool;            }        }        /// <summary>        /// 获取用户数据组件实例集合的引用        /// </summary>        public List<DBindingData> BindingDataPool        {            get            {                return this._bindingDataPool;            }        }        /// <summary>        /// 获取触发器组件实例集合的引用        /// </summary>        public List<DTrigger> TriggerPool        {            get            {                return this._triggerPool;            }        }    }    /// <summary>    /// 表示一个二维矢量    /// </summary>    public struct Vector    {        /// <summary>        /// 矢量的横坐标        /// </summary>        public double x;        /// <summary>        /// 矢量的纵坐标        /// </summary>        public double y;        /// <summary>        /// 构造一个新的矢量        /// </summary>        /// <param name="x">横坐标X</param>        /// <param name="y">纵坐标Y</param>        public Vector(double x, double y)        {            this.x = x;            this.y = y;        }        /// <summary>        /// 构造一个新的矢量        /// </summary>        /// <param name="vec">一个已有的矢量</param>        public Vector(Vector vec)        {            this.x = vec.x;            this.y = vec.y;        }        /// <summary>        /// 获取矢量的长度（模）        /// </summary>        public double length        {            get            {                return Math.Sqrt(this.x * this.x + this.y * this.y);            }        }        /// <summary>        /// 将该矢量转换成System.Drawing.Point类型        /// </summary>        /// <returns>一个由该矢量转换而成的新的System.Drawing.Point</returns>        public Point ToPoint()        {            return new Point((int)this.x, (int)this.y);        }        /// <summary>        /// 将两个矢量相加        /// </summary>        /// <param name="a">矢量a</param>        /// <param name="b">矢量b</param>        /// <returns>相加后得到的一个新矢量</returns>        public static Vector operator +(Vector a, Vector b)        {            return new Vector(a.x + b.x, a.y + b.y);        }        /// <summary>        /// 将两个矢量相减        /// </summary>        /// <param name="a">矢量a</param>        /// <param name="b">矢量b</param>        /// <returns>矢量a减去矢量b后得到的一个新矢量</returns>        public static Vector operator -(Vector a, Vector b)        {            return new Vector(a.x - b.x, a.y - b.y);        }        /// <summary>        /// 求两个矢量的点积        /// </summary>        /// <param name="a">矢量a</param>        /// <param name="b">矢量b</param>        /// <returns>两个矢量的点积</returns>        public static double operator *(Vector a, Vector b)        {            return a.x * b.x + a.y * b.y;        }        /// <summary>        /// 比较两个矢量的xy值是否相等        /// </summary>        /// <param name="a">矢量a</param>        /// <param name="b">矢量b</param>        /// <returns>相等返回true，不等返回false</returns>        public static bool operator ==(Vector a, Vector b)        {            if (a.x == b.x && a.y == b.y)                return true;            else                return false;        }        /// <summary>        /// 比较两个矢量的xy值是否不等        /// </summary>        /// <param name="a">矢量a</param>        /// <param name="b">矢量b</param>        /// <returns>不等返回true，相等返回false</returns>        public static bool operator !=(Vector a, Vector b)        {            return !(a == b);        }        public override bool Equals(object obj)        {            return base.Equals(obj);        }        public override int GetHashCode()        {            return base.GetHashCode();        }        /// <summary>        /// 获取矢量的字符串表现形式        /// </summary>        /// <returns>一个表示矢量的字符串，如(0, 0)</returns>        public override string ToString()        {            return "(" + this.x + ", " + this.y + ")";        }    }    namespace Components    {        /// <summary>        /// 表示变换组件的类，将影响到render组件和physics组件的行为        /// </summary>        public class DTransform        {            private Vector _position;            private double _rotation;            private Vector _scale;            internal DTransform()            {                this._position = new Vector(0d, 0d);                this._rotation = 0d;                this._scale = new Vector(1d, 1d);            }            /// <summary>            /// 获取或设置物件的位置            /// </summary>            /// <remarks>值表示设计坐标</remarks>            public Vector Position            {                set                {                    this._position = value;                }                get                {                    return this._position;                }            }            /// <summary>            /// 获取或设置物件的旋转角度            /// </summary>            /// <remarks>单位为度</remarks>            public double Rotation            {                set                {                    this._rotation = value;                }                get                {                    return this._rotation;                }            }            /// <summary>            /// 获取或设置物件的缩放程度            /// </summary>            /// <remarks>值表示缩放比例</remarks>            public Vector Scale            {                set                {                    this._scale = value;                }                get                {                    return this._scale;                }            }        }        /// <summary>        /// 表示渲染组件的类        /// </summary>        public class DRender        {            /// <summary>            /// 表示渲染组件的类型            /// </summary>            public enum RenderTypes { Shape, Sprite, Text, Bitmap };            private RenderTypes _renderType;            private Color _tintColor;            private string _text;            private string _layer;            private int _order;            /// <summary>            /// 构造一个新的渲染组件            /// </summary>            /// <param name="renderType">渲染组件类型</param>            /// <param name="layer">图像所属图层</param>            /// <param name="order">图像在图层中的位置(0为底层)</param>            public DRender(RenderTypes renderType, string layer, int order)            {                this._renderType = renderType;                this._layer = layer;                this._order = order;                if (renderType == RenderTypes.Bitmap)                {                    this._tintColor = Color.FromArgb(0, 0, 0);                }            }            /// <summary>            /// 获取渲染组件的类型            /// </summary>            public RenderTypes RenderType            {                get                {                    return this._renderType;                }            }            /// <summary>            /// 获取或设置当渲染类型为Bitmap时图像的色调            /// </summary>            public Color TintColor            {                set                {                    this._tintColor = value;                }                get                {                    return this._tintColor;                }            }            /// <summary>            /// 获取或设置图像所属的图层            /// </summary>            public string Layer            {                set                {                    this._layer = value;                }                get                {                    return this._layer;                }            }            /// <summary>            /// 获取或设置图像在当前图层中的位置            /// </summary>            public int Order            {                set                {                    this._order = value;                }                get                {                    return this._order;                }            }        }        /// <summary>        /// 表示动画组件的类        /// </summary>        public class DAnimation        {            public enum AnimationTypes { Tween, Frames };            private AnimationTypes _animationType;            public DAnimation(AnimationTypes animationType)            {            }        }        /// <summary>        /// 表示物理组件的类        /// </summary>        public class DPhysics        {            /// <summary>            /// 构造一个新的物理组件            /// </summary>            public DPhysics()            {            }        }        /// <summary>        /// 表示交互组件的类        /// </summary>        public class DInteraction        {
            public enum DeviceTypes { Mouse, Keyboard };

            private DeviceTypes _deviceType;            /// <summary>            /// 构造一个新的交互组件            /// </summary>            public DInteraction()            {
                this._deviceType = DeviceTypes.Keyboard;            }            public DeviceTypes DeviceType
            {
                set
                {
                    this._deviceType = value;
                }
                get
                {
                    return this._deviceType;
                }
            }        }        /// <summary>        /// 表示用户数据组件的类        /// </summary>        public class DBindingData        {            private List<double> _doubleValues;            private List<string> _stringValues;            private List<bool> _boolValues;            private List<Color> _colorValues;            private List<Vector> _vectorValues;            /// <summary>            /// 构造一个新的用户数据组件            /// </summary>            public DBindingData()            {                this._doubleValues = new List<double>();                this._stringValues = new List<string>();                this._boolValues = new List<bool>();                this._colorValues = new List<Color>();                this._vectorValues = new List<Vector>();            }            /// <summary>            /// 获取double类型集合的引用            /// </summary>            public List<double> DoubleValues            {                get                {                    return this._doubleValues;                }            }            /// <summary>            /// 获取string类型集合的引用            /// </summary>            public List<string> StringValues            {                get                {                    return this._stringValues;                }            }            /// <summary>            /// 获取bool类型集合的引用            /// </summary>            public List<bool> BoolValues            {                get                {                    return this._boolValues;                }            }            /// <summary>            /// 获取Color结构集合的引用            /// </summary>            public List<Color> ColorValues            {                get                {                    return this._colorValues;                }            }            /// <summary>            /// 获取Vector结构集合的引用            /// </summary>            public List<Vector> VectorValues            {                get                {                    return this._vectorValues;                }            }        }        /// <summary>        /// 表示触发器组件的类        /// </summary>        public class DTrigger        {            /// <summary>            /// 表示状态机的结构            /// </summary>            public struct StateMachine            {            }            /// <summary>            /// 构造一个新的触发器组件            /// </summary>            public DTrigger()            {            }        }    }}